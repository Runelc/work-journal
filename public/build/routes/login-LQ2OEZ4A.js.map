{
  "version": 3,
  "sources": ["../../../app/routes/login.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login.jsx\");\n  import.meta.hot.lastModified = \"1708968352745.404\";\n}\n// REMIX HMR END\n\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { createCookieSessionStorage } from \"@remix-run/node\";\nimport { commitSession, getSession } from \"~/session\";\nimport { redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nexport async function loader({\n  request\n}) {\n  let storage = createCookieSessionStorage({\n    cookie: {\n      name: \"work-journal-session\"\n    }\n  });\n  let session = await storage.getSession(request.headers.get(\"cookie\"));\n  return session.data;\n}\nexport default function LoginPage() {\n  _s();\n  let data = useLoaderData();\n  let actionData = useActionData();\n  return <div className=\"mt-8\">\n      {data.isAdmin ? <p>You're logged in!</p> : <Form method=\"post\">\n          <input className=\"text-gray-900\" placeholder=\"email\" name=\"email\" type=\"email\" required />\n          <input className=\"text-gray-900\" placeholder=\"password\" name=\"password\" type=\"password\" required />\n          <button className=\"bg-blue-500 px-3 py-2 font-medium text-white\">\n            Log in\n          </button>\n\n          {actionData?.error && <p className=\"mt-4 font-medium text-red-500\">{actionData.error}</p>}\n        </Form>}\n    </div>;\n}\n_s(LoginPage, \"1e25SFC8uAEJL70nU/asewoV2OE=\", false, function () {\n  return [useLoaderData, useActionData];\n});\n_c = LoginPage;\nexport async function action({\n  request\n}) {\n  let formData = await request.formData();\n  let {\n    email,\n    password\n  } = Object.fromEntries(formData);\n  if (email === \"sam@buildui.com\" && password === \"password\") {\n    let session = await getSession();\n    session.set(\"isAdmin\", true);\n    return redirect(\"/\", {\n      headers: {\n        \"Set-Cookie\": await commitSession(session)\n      }\n    });\n  } else {\n    let error;\n    if (!email) {\n      error = \"Email is required.\";\n    } else if (!password) {\n      error = \"Password is required.\";\n    } else {\n      error = \"Invalid login.\";\n    }\n    return json({\n      error\n    }, 401);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAsBA,kBAA2C;AAE3C,IAAAA,eAAyB;AAEzB,IAAAC,eAAqB;AAiBC;AA1CtB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AAoBe,SAAR,YAA6B;AAClC,KAAG;AACH,MAAI,OAAO,cAAc;AACzB,MAAI,aAAa,cAAc;AAC/B,SAAO,mDAAC,SAAI,WAAU,QACjB,eAAK,UAAU,mDAAC,OAAE,iCAAH;AAAA;AAAA;AAAA;AAAA,SAAoB,IAAO,mDAAC,QAAK,QAAO,QACpD;AAAA,uDAAC,WAAM,WAAU,iBAAgB,aAAY,SAAQ,MAAK,SAAQ,MAAK,SAAQ,UAAQ,QAAvF;AAAA;AAAA;AAAA;AAAA,WAAwF;AAAA,IACxF,mDAAC,WAAM,WAAU,iBAAgB,aAAY,YAAW,MAAK,YAAW,MAAK,YAAW,UAAQ,QAAhG;AAAA;AAAA;AAAA;AAAA,WAAiG;AAAA,IACjG,mDAAC,YAAO,WAAU,gDAA+C,sBAAjE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEC,YAAY,SAAS,mDAAC,OAAE,WAAU,iCAAiC,qBAAW,SAAzD;AAAA;AAAA;AAAA;AAAA,WAA+D;AAAA,OAP9C;AAAA;AAAA;AAAA;AAAA,SAQzC,KATC;AAAA;AAAA;AAAA;AAAA,SAUL;AACJ;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,eAAe,aAAa;AACtC,CAAC;AACD,KAAK;AA+BL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_node", "import_node"]
}
